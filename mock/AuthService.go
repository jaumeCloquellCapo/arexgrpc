// Code generated by MockGen. DO NOT EDIT.
// Source: UserService.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/jaumeCloquellCapo/authGrpc/app/model"
	reflect "reflect"
)

/**
Login(user model.Credentials) (tokenDetails model.TokenDetails, err error)
Logout(accessUUID string) error
SignUp(UserSignUp model.CreateUser) (user *model.User, tokenDetails model.TokenDetails, err error)
GetAuth(AccessUUID string) (int64, error)
 */

// MockAuthServiceUseCase is a mock of UserUseCase interface
type MockAuthServiceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCaseMockRecorder
}

// MockAuthUseCaseMockRecorder is the mock recorder for MockAuthServiceUseCase
type MockAuthUseCaseMockRecorder struct {
	mock *MockAuthServiceUseCase
}

// NewMockUserServiceCase creates a new mock instance
func NewMockAuthServiceCase(ctrl *gomock.Controller) *MockAuthServiceUseCase {
	mock := &MockAuthServiceUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthServiceUseCase) EXPECT() *MockAuthUseCaseMockRecorder {
	return m.recorder
}


// Login mocks base method
func (m *MockAuthServiceUseCase) Login(Credentials model.Credentials) (tokenDetails model.TokenDetails, err error){
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", Credentials)
	ret0, _ := ret[0].(model.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthUseCaseMockRecorder) Login(Credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceUseCase)(nil).Login), Credentials)
}

// FindByEmail mocks base method
func (m *MockAuthServiceUseCase) Logout(accessUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", accessUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *MockAuthUseCaseMockRecorder) Logout(accessUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthServiceUseCase)(nil).Logout), accessUUID)
}

// FindById mocks base method
func (m *MockAuthServiceUseCase) SignUp(UserSignUp model.CreateUser) (user *model.User, tokenDetails model.TokenDetails, err error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", UserSignUp)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(model.TokenDetails)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindById indicates an expected call of FindById
func (mr *MockAuthUseCaseMockRecorder) SignUp(UserSignUp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthServiceUseCase)(nil).SignUp), UserSignUp)
}


// FindById mocks base method
func (m *MockAuthServiceUseCase)GetAuth(AccessUUID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuth", AccessUUID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockAuthUseCaseMockRecorder) GetAuth(AccessUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuth", reflect.TypeOf((*MockAuthServiceUseCase)(nil).SignUp), AccessUUID)
}
